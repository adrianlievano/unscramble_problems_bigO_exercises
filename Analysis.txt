
Task 0:
1.1.3 Worse-Case Big O Notation Analysis:
O(1) --> indexing into a list is constant runtime; it does not depend on the input length. 

Task 1: 
2.0.1 Worse-Case Big O Notation Analysis:
O(n) --> As the order of input scales by n, the worst case scenario means that the amount of computations increases by n. Because the for loops are not nested, we do not have O(nˆ2) runtime. Space complexity is O(n).

Task 2: 
3.0.1 Worse-Case Big O Notation Analysis
I implemented an algorithm that first (i) searches through n elements in the calls list (both sender & receiver) and builds another list that tracks if there are any unique elements. After, (ii) the code initializes a hash map with its keys each being a unique call number found in the calls list. From there, (iii) we again iterate through the calls list, length n, and search through the hash map to see if the phone number is equal to the key in the hash map, length m. Python’s ’if in’ high-level syntax iterates through the keys of length m. If we assume the worse case scenario, where each number in the calls list, n, is unique, m will be equal to n (m=n). Because we are looping twice, this algorithm in the worst case scenario is: O(nˆ2).

We did, however, modify our code to include, instead of looping through keys, an if statement that checks the associated value at the designated key location, which is O(1). If we do this, our implementation can be reduced to:
O(n).

Task 3:

Part A:
4.1.1 Worse-Case Big O Notation Analysis
O(nˆ2): In particular, there are a few sections in my code that leverage python’s ’if not in’ struc- ture within a for loop. In this scenario, the worse case is O(nˆ2). If the input list length, n, and the unique_called_by_banga, or the secondary list, denoted length m, being checked through each loop itearation, are unique, then m will equal n, and the worse run time is 0(nˆ2). “‘ unique_called_by_banga = [] for i in range(len(called_by_banga)): if called_by_banga[i] not in unique_called_by_banga: unique_called_by_banga.append(called_by_banga[i])

Part B: 
4.2.1 Worse-Case Big O Notation Analysis
Sequential implementation of linear for loops, based on the length of the calls database with a simple conditional check, is, in the worst case scenario:
O(n).

Task 4:
5.0.1 Worse-Case Big O Notation Analysis
This is a brute force algorithm, where we build two lists, using linear algorithms, and then check if the element in the sender list is in the calling list. Because the worse case scenario could mean checking n elements from the sender list to m elements, this is a:
O(nˆn) algorithm, or O(n!).